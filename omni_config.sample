# This is a sample Omni config file
# It tells Omni how to talk to various Clearinghouses.
# And by extension, which Experimenter credentials to use.

# Omni looks for this file in 4 locations, using the first found
# 1) The location given by the -c command line arg - as a full path
# 2) The -c command line arg as a file relative to ~/.gcf
# 3) omni_config in the current directory
# 4) ~/.gcf/omni_config

# Any given instance of omni makes calls to a framework 
# (e.g., SFA, ProtoGENI, etc..) to create slices, get slice
# credentials, and to find a list of authorized aggregates.
# This file specifies the control frameworks that you are
# a member of and the users that you want to be able to login
# to your allocated resources (e.g., virtual machines)


[omni]
# The default control framework for omni to use.
# Override on the commandline with -f argument.
# This should be the name of a section that you define below
# Note you could have multiple instances of the same type
# configured, EG for different MyPLC instances.
default_cf = my_gcf

# The slice_users argument in "CreateSliver".  It uploads
# names and public ssh keys to allocated resources for login.
# Details on users should be defined in sections below
# users = Alice, Bob

# Over-ride the commandline setting of --useSliceMembers to force it True
# useslicemembers = True

# Over-ride the commandline setting of --ignoreConfigUsers to force it True
# ignoreconfigusers = True


# Omni will by default contact every Aggregate Manager listed
# by your control framework's registry/clearinghouse.  If you would
# like to provide a specific list of aggregates to contact, do so 
# here in a comma delimited list of of urls or nicknames defined later.
# e.g., a PL in Princeton AM, a PG in Utah AM, a test GCF AM, and 
#  an OpenFlow/Expedient AM in the GPO lab would be: 
# aggregates = http://www.planet-lab.org:12347/, \
#  https://www.emulab.net:12369/protogeni/xmlrpc/am, \
#  http://myplc2.gpolab.bbn.com:8001/, \
#  https://masada.gpolab.bbn.com:443/openflow/gapi/


# You can also tell Omni a single aggregate URL to contact, with the -a
# argument. In addition, rather than remembering the URL, you can define a
# nickname for the aggregate here. This is completely optional.

#------AM nicknames
# Omni defines a standard set of aggregate nicknames. These are retrieved periodically
# from http://trac.gpolab.bbn.com/gcf/raw-attachment/wiki/Omni/agg_nick_cache
# Put your custom aggregate nicknames here. 
# To see all available nicknames try: omni.py nicknames
#
# Format :
# Nickname=URN, URL
# URN is optional
[aggregate_nicknames]
# boston=urn:publicid:IDN+instageni.gpolab.bbn.com+authority+cm,https://boss.instageni.gpolab.bbn.com:12369/protogeni/xmlrpc/am/2.0

#------RSpec nicknames
# When you call
#      omni.py createsliver myslice myrspec
# omni will try to read 'myrspec' by interpreting it in the following order:
# 1. a URL or a file on the local filesystem
# 2. a nickname specified in the omni_config
# 3. a file in a location (file or url) defined as: 
#    <default_rspec_server>/<rspec_nickname>.<default_rspec_extension> 

[rspec_nicknames]
# Format :
# Nickname= [location of RSpec file]
# myawesometopology = ~/.gcf/rspecs/myrspecfile.rspec
hellogeni = http://www.gpolab.bbn.com/experiment-support/HelloGENI/hellogeni.rspec

default_rspec_location = http://www.gpolab.bbn.com/experiment-support
default_rspec_extension = rspec

# ==================================
# Configure Control Frameworks here

# At least one framework section (sfa/pg/gcf/pgch/chapi) needs to be filled out
# and pointed to by default_cf

[my_sfa]
# Most of these fields can be found in an SFI configuration
# See: http://svn.planet-lab.org/wiki/SFAConfigurationGuide#ConfiguringSFITools

# The framework type (either sfa, pg, gcf, or chapi)
type=sfa

# HRN of your MyPLC or PLC (e.g., plc.princeton) site
# Available in the Issuer CN of your user cert in some form
authority=plc.bbn

# Your planetlab username
user=plc.bbn.jkarlin

# Your PL certificate (omni will offer to download it here if needed)
cert=~/.gcf/jkarlin.gid

# Your planetlab private key
key=~/.gcf/id_rsa_planetlab

# URLs of your PL registry and slice manager					
# Be sure these are reachable
registry=http://www.planet-lab.org:12345
slicemgr=http://www.planet-lab.org:12347

[my_chapi]
# For use with the Uniform Federation API
type=chapi

# Authority part of the control framework's URN
authority=ch.geni.net

# Where the CH API server's Clearinghouse service is listening.
# This will be used to find the MA and SA
ch=https://ch.geni.net:8444/CH

# Optionally you may explicitly specify where the MA and SA are
#  running, in which case the Clearinghouse service is not used 
#  to find them
ma=https://ch.geni.net/MA
sa=https://ch.geni.net/SA

cert=~/.gcf/alice-cert.pem
key=~/.gcf/alice-key.pem

# For debugging
verbose=false

# Some chapi Clearinghouses do not use projects
# Uncomment this line for such servers (such as emulab.net)
#useprojects=false

# Some chapi Clearinghouses require you supply a credential in calls
# Uncomment this line for such servers (such as emulab.net)
#needcred=true

[my_gcf]
type=gcf

# Authority part of the control frameworks URN
authority=geni:gpo:gcf

# Where the gcf-ch server is listening
ch=https://localhost:8000

cert=~/.gcf/alice-cert.pem
key=~/.gcf/alice-key.pem

[my_pg]
type=pg
# For debugging
verbose=false
# The address of the PG clearinghouse. Here we use tha main CH in Utah,
# with authority name: emulab.net
ch=https://www.emulab.net:12369/protogeni/xmlrpc/ch

# The address of the PG slice authority. Here for comparison we show
# using a different slice authority for the PG authority
# pgeni.gpolab.bbn.com
sa=https://boss.pgeni.gpolab.bbn.com:12369/protogeni/xmlrpc/sa

# When you log in to PG you can download your cert and key in 1 file.
# That combined .pem file can be used as both cert and key here.
cert=~/.gcf/encrypted.pem
key=~/.gcf/pgcert.pem


# ===================================
# Define users here.

# Per above, these are the users of the slices, to tell
# aggregates who care who will be logging in and how.
# See the CreateSliver API call.



[Alice]
# The URN given to Alice by her control framework
# EG run openssl x509 -in [user cert file] -text and 
# look at the Subject Alternative Name URI. 
# Take the bit after "URI:" and before the comma.
urn=urn:publicid:IDN+geni.net:gpo:gcf+user+alice

# The SSH public keys to install for Alice to allow
# Alice to log in to the allocated resource.
# Comma delimited list of SSH public key file names.
# Note that these could be keys for a list of collaborators,
# all of whom will get to log in to the same account.
keys=~/.gcf/alice.pub, ~/.gcf/alice2.pub


[Bob]
urn=urn:publicid:IDN+plc.bbn+user+bob
keys=~/.gcf/bob.pub
